'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''  Precio.vb
''  Implementation of the Class Precio
''  Generated by Enterprise Architect
''  Created on:      24-abr.-2018 06:09:08 p. m.
''  Original author: Iván Trujillo
''  
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Modification history:
''  
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Imports System.Collections.Generic
Imports System.Data.SqlClient
Imports System.Linq
Imports SigaMetClasses.Estructural.Clases.SigaMetClasses

Public Class Precio
    'Inherits SigaMetClasses.frmAltaPagoTarjeta

    Public Sub New()
    End Sub

    Private _ZonaEconomica As Integer

    Public Property ZonaEconomica() As Integer
        Get
            Return _ZonaEconomica
        End Get
        Set(ByVal Value As Integer)
            _ZonaEconomica = Value
        End Set
    End Property

    Private Function consultarPrecioVigente() As List(Of DetallePrecioGLP)
        Dim cmd As New SqlCommand("spCCLIQConsultaPrecioGLP")
        cmd.CommandType = CommandType.StoredProcedure
        Dim listaPrecios As New List(Of DetallePrecioGLP)

        Try
            AbreConexion()
            cmd.Connection = DataLayer.Conexion
            Dim dr As SqlDataReader
            dr = cmd.ExecuteReader(CommandBehavior.CloseConnection)
            While dr.Read
                Dim precio As New DetallePrecioGLP
                precio.ZonaEconomica = CType(dr("ZonaEconomica"), Integer)
                precio.Precio = CType(dr("Precio"), Decimal)
                precio.PorcentajeIVA = CType(dr("PorcentajeIVA"), Decimal)
                listaPrecios.Add(precio)
            End While

            If listaPrecios.Count > 0 Then
                consultarPrecioVigente = listaPrecios
            Else
                'consultarPrecioVigente = Nothing
            End If


        Catch ex As Exception
            consultarPrecioVigente = listaPrecios
        Finally
            CierraConexion()
            cmd = Nothing
        End Try

    End Function

    ''' 
    ''' <param name="Litros"></param>
    Public Function calcularImporte(ByVal Litros As Decimal) As Decimal
        Dim lista As New List(Of DetallePrecioGLP)
        Dim detalle As New DetallePrecioGLP
        Dim dResultado As Decimal = 0
        Dim precio As Decimal
        Dim porcentaje As Decimal

        lista = consultarPrecioVigente()

        If _ZonaEconomica <> Nothing Then
            Try
                detalle = (From Y In lista Where Y.ZonaEconomica = _ZonaEconomica).First
                precio = detalle.Precio
                porcentaje = detalle.PorcentajeIVA
                dResultado = Litros * (precio * (1 + (porcentaje / 100)))
            Catch ex As Exception
                Throw New Exception("Error al consultar la zona económica indicada")
            End Try
        Else
            Throw New Exception("Imposible elegir precio, es necesario indicar una zona económica")
        End If
        calcularImporte = dResultado
    End Function

    ''' 
    ''' <param name="Importe"></param>
    Public Function calcularLitros(ByVal Importe As Decimal) As Decimal
        Dim lista As New List(Of DetallePrecioGLP)
        Dim detalle As New DetallePrecioGLP

        Dim precio As Decimal
        Dim porcentaje As Decimal
        Dim dResultado As Decimal = 0

        lista = consultarPrecioVigente()

        If _ZonaEconomica <> Nothing Then
            Try
                detalle = (From Y In lista Where Y.ZonaEconomica = _ZonaEconomica).First
                precio = detalle.Precio
                porcentaje = detalle.PorcentajeIVA
                dResultado = Importe / (precio * (1 + (porcentaje / 100)))
            Catch ex As Exception
                Throw New Exception("Error al consultar la zona económica indicada")
            End Try
        Else
            Throw New Exception("Imposible elegir precio, es necesario indicar una zona económica")
        End If
        calcularLitros = dResultado
    End Function


End Class ' Precio